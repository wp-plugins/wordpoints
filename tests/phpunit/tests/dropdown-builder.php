<?php

/**
 * A test case for the WordPoints_Dropdown_Builder class.
 *
 * @package WordPoints\Tests
 * @since 1.4.0
 */

/**
 * Test that the WordPoints_Dropdown_Builder class builds dropdowns properly.
 *
 * @since 1.4.0
 */
class WordPoints_Dropdown_Builder_Test extends WP_UnitTestCase {

	//
	// Helper Methods.
	//

	/**
	 * Get the HTML generated by the dropdown builder given the passes arguments.
	 *
	 * @since 1.4.0
	 *
	 * @param array $args The arguments for the dropdown builder.
	 *
	 * @return string The output of the generator.
	 */
	protected function get_dropdown_html( array $args = array(), array $options = null ) {

		if ( null === $options ) {
			$options = array( 1 => 'Option 1', 2 => 'Option 2' );
		}

		$dropdown = new WordPoints_Dropdown_Builder( $options, $args );

		ob_start();
		$dropdown->display();
		return ob_get_clean();
	}

	//
	// Tests.
	//

	/**
	 * Test that it builds a basic dropdown properly.
	 *
	 * @since 1.4.0
	 */
	public function test_basic_dropdown() {

		$dropdown = $this->get_dropdown_html();

		$this->assertTag(
			array(
				'tag' => 'select',
				'children' => array(
					'count' => 2,
				),
			)
			, $dropdown
		);

		$this->assertTag(
			array(
				'tag' => 'select',
				'child' => array(
					'tag' => 'option',
					'attributes' => array( 'value' => '1' ),
					'content' => 'Option 1',
				),
			)
			, $dropdown
		);

		$this->assertTag(
			array(
				'tag' => 'select',
				'child' => array(
					'tag' => 'option',
					'attributes' => array( 'value' => '2' ),
					'content' => 'Option 2',
				),
			)
			, $dropdown
		);

	} // public function test_basic_dropdown()

	/**
	 * Test the 'selected' argument.
	 *
	 * @since 1.4.0
	 */
	public function test_selected_option_selected() {

		$this->assertTag(
			array(
				'tag' => 'select',
				'child' => array(
					'tag' => 'option',
					'attributes' => array(
						'value' => '1',
						'selected' => 'selected',
					),
				),
			)
			, $this->get_dropdown_html( array( 'selected' => 1 ) )
		);
	}

	/**
	 * Test the 'name' argument is used as the select element's name.
	 *
	 * @since 1.4.0
	 */
	public function test_name() {

		$this->assertTag(
			array( 'tag' => 'select', 'attributes' => array( 'name' => 'test' ) )
			, $this->get_dropdown_html( array( 'name' => 'test' ) )
		);
	}

	/**
	 * Test the 'id' argument is used as the select element's id.
	 *
	 * @since 1.4.0
	 */
	public function test_id() {

		$this->assertTag(
			array( 'tag' => 'select', 'id' => 'test' )
			, $this->get_dropdown_html( array( 'id' => 'test' ) )
		);
	}

	/**
	 * Test the 'class' argument is used as the select element's class.
	 *
	 * @sincne 1.4.0
	 */
	public function test_class() {

		$this->assertTag(
			array( 'tag' => 'select', 'attributes' => array( 'class' => 'test' ) )
			, $this->get_dropdown_html( array( 'class' => 'test' ) )
		);
	}

	/**
	 * Test the 'show_option_none' argument.
	 *
	 * @since 1.4.0
	 */
	public function test_show_option_none() {

		$this->assertTag(
			array(
				'tag' => 'select',
				'child' => array(
					'tag' => 'option',
					'attributes' => array( 'value' => '-1' ),
					'content' => 'None',
				),
				'children' => array(
					'count' => 3,
				),
			)
			, $this->get_dropdown_html( array( 'show_option_none' => 'None' ) )
		);
	}

	/**
	 * Test the 'options_key' and 'values_key' arguments with options as arrays.
	 *
	 * @since 1.4.0
	 */
	public function test_options_as_arrays() {

		$dropdown = $this->get_dropdown_html(
			array( 'options_key' => 'option', 'values_key' => 'value' )
			, array(
				array( 'option' => 'Option 1', 'value' => '1' ),
				array( 'option' => 'Option 2', 'value' => '2' ),
			)
		);

		$this->assertTag(
			array(
				'tag' => 'select',
				'child' => array(
					'tag' => 'option',
					'attributes' => array( 'value' => '1' ),
					'content' => 'Option 1',
				),
			)
			, $dropdown
		);

		$this->assertTag(
			array(
				'tag' => 'select',
				'child' => array(
					'tag' => 'option',
					'attributes' => array( 'value' => '2' ),
					'content' => 'Option 2',
				),
			)
			, $dropdown
		);
	}

	/**
	 * Test the 'options_key' and 'values_key' arguments with options as objects.
	 *
	 * @since 1.4.0
	 */
	public function test_options_as_objects() {

		$dropdown = $this->get_dropdown_html(
			array( 'options_key' => 'option', 'values_key' => 'value' )
			, array(
				(object) array( 'option' => 'Option 1', 'value' => '1' ),
				(object) array( 'option' => 'Option 2', 'value' => '2' ),
			)
		);

		$this->assertTag(
			array(
				'tag' => 'select',
				'child' => array(
					'tag' => 'option',
					'attributes' => array( 'value' => '1' ),
					'content' => 'Option 1',
				),
			)
			, $dropdown
		);

		$this->assertTag(
			array(
				'tag' => 'select',
				'child' => array(
					'tag' => 'option',
					'attributes' => array( 'value' => '2' ),
					'content' => 'Option 2',
				),
			)
			, $dropdown
		);
	}
}
